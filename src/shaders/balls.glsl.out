uniform float f;uniform vec2 r;
#define PI 3.14
#define R3 1.732051
vec2 rotate(vec2 uv,float radians){return vec2(uv.r*cos(radians)-uv.g*sin(radians),uv.r*sin(radians)+uv.g*cos(radians));}vec2 kaleidoscope(vec2 uv,vec2 point,float add){for(int i=0;i<14;i++)uv=rotate(uv,PI*2./14.),uv.r=abs(uv.r);uv-=point;return uv;}float dist(vec2 uv){return pow(pow(uv.r,2.)+pow(uv.g,2.),.5);}vec3 color(float p,float offs){return sin(vec3(12.23,45.23,56.2)+offs*3.)*.5+.5;}float dot_pattern(vec2 uv,float time,float crazynator){uv=kaleidoscope(uv,vec2(.3+.2*sin(time),.4),2.+sin(time/3.));float col=0.;for(float i=0.;i<10.;i++){for(float j=0.;j<10.;j++){vec2 gv=vec2(i+mod(j,2.)/2.-8.,(j-8.)*.707)/16.;float size=sin(pow(i-8.,2.)+pow(j-8.,2.)+time+25.*dist(uv-gv))*.05*crazynator;if(dist(uv-gv)<size)col+=1.;else col+=0.;}}col-=1.1;col=mod(col,2.)-.95;return col;}float N(float p){return fract(sin(p*123.34)*345.456);}vec4 mainImage(vec2 fragCoord,vec2 iResolution){vec4 fragColor;vec2 uv=fragCoord/iResolution.rg/vec2(1.,16./9.);uv-=vec2(.5,.28125);float iTime=f/60.,duv=dot(uv,uv),t=iTime/3.,intensity2=0.,crazynator=max(1.,min(8.,(iTime-8.)/2.));for(float i=0.;i<1.;i+=1./3.){float t=fract(i+t),z=mix(7.,.1,t),fade=smoothstep(0.,.3,t)*smoothstep(1.,.7,t);intensity2+=fade*t*dot_pattern(uv*z/1.8,iTime+i,crazynator);}vec3 colorized=color(iTime,dist(uv));float intensity1=dot_pattern(uv,iTime,1.),time_stepper=iTime-6.,output_intensity=smoothstep(1.,0.,time_stepper)*intensity1+smoothstep(0.,1.,time_stepper)*intensity2,colonator=max(0.,min(1.,(iTime-14.)/2.));vec3 fadeout_colorized=colorized*(1.-colonator)+vec3(.521569,.952941,.623529)*colonator,output_ready_for_fade=output_intensity*colorized,faded_output=output_ready_for_fade*(1.-colonator)+vec3(.521569,.952941,.623529)*colonator;fragColor=vec4(faded_output,1.);return fragColor;}void main(){vec2 position=gl_FragCoord.rg/r;gl_FragColor=mainImage(gl_FragCoord.rg,r);}
